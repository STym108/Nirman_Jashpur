import React, { useState, useEffect } from "react";
import { useLocation, useNavigate, useParams } from "react-router-dom";
import "./WorkInProgressForm.css";

export default function WorkInProgressForm({onLogout}) {
  const navigate = useNavigate();
  const location = useLocation();
  const { workID } = useParams();

  // ‚úÖ Breadcrumbs based on path
  const crumbs = React.useMemo(() => {
    const parts = location.pathname
      .split("/")
      .filter(Boolean)
      .map((s) =>
        s.replace(/-/g, " ").replace(/\b\w/g, (ch) => ch.toUpperCase())
      );
    return [...parts].join(" / ");
  }, [location.pathname]);

  // ‚úÖ Set Page Title
  useEffect(() => {
    document.title = "‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ | ‡§∞‡§æ‡§∂‡§ø ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§™‡•ç‡§∞‡§™‡§§‡•ç‡§∞";
  }, []);

  const [rows, setRows] = useState([{ kisht: 1, amount: "", date: "" }]);
  const [form, setForm] = useState({
    sanctionedAmount: "",
    releasedAmount: "",
    remainingAmount: "",
    mbStage: "",
    expenditureAmount: "",
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: value }));
  };

  const handleRowChange = (index, e) => {
    const { name, value } = e.target;
    const updatedRows = [...rows];
    updatedRows[index][name] = value;
    setRows(updatedRows);
  };

  const addRow = () => {
    setRows([...rows, { kisht: rows.length + 1, amount: "", date: "" }]);
  };

  const removeRow = (index) => {
    setRows(rows.filter((_, i) => i !== index));
  };

  const handleLogout = () => {
    if (window.confirm("‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§≤‡•â‡§ó‡§Ü‡§â‡§ü ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?")) {
      navigate("/");
    }
  };

  const handleCancel = () => {
    navigate(-1);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log("Form Data:", { ...form, rows });
    alert("‡§∞‡§æ‡§∂‡§ø ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§™‡•ç‡§∞‡§™‡§§‡•ç‡§∞ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∏‡§π‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ!");
  };

  return (
    <div className="workprogress-page">
      {/* ‚úÖ Top bar */}
      <div className="header">
        <div className="top">
          <div className="brand">
            <div className="crumbs" id="crumbs">
              {crumbs}
            </div>
            <h1>‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£</h1>
          </div>
          <div className="right-top">
            <div className="user">
              <div className="ic" title="User">
                <svg
                  width="18"
                  height="18"
                  viewBox="0 0 24 24"
                  fill="currentColor"
                  aria-hidden="true"
                >
                  <path d="M12 12c2.761 0 5-2.686 5-6s-2.239-6-5-6-5 2.686-5 6 2.239 6 5 6zm0 2c-5.33 0-10 2.239-10 5v3h20v-3c0-2.761-4.67-5-10-5z" />
                </svg>
              </div>
             <button className="logout" aria-label="Logout" type="button" onClick={onLogout || (() => {
              if (window.confirm('‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§≤‡•â‡§ó‡§Ü‡§â‡§ü ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?')) {
                window.location.href = '/';
              }
            })}><i className="fa-solid fa-power-off" /></button>
            </div>
          </div>
        </div>

        <div className="subbar">
          <span className="dot" />
          <h2>‡§∞‡§æ‡§∂‡§ø ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§™‡•ç‡§∞‡§™‡§§‡•ç‡§∞</h2>
        </div>
      </div>

      {/* ‚úÖ Form card */}
      <div className="wrap">
        <section className="panel">
          <div className="panel-header">
            <h3>‡§∞‡§æ‡§∂‡§ø ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§µ‡§ø‡§µ‡§∞‡§£</h3>
          </div>

          <form className="p-body" onSubmit={handleSubmit}>
            <div className="form-grid">
              <div className="form-group">
                <label>‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§ ‡§∞‡§æ‡§∂‡§ø</label>
                <input
                  type="number"
                  name="sanctionedAmount"
                  value={form.sanctionedAmount}
                  onChange={handleChange}
                  className="form-input"
                  placeholder="‡§∞‡§æ‡§∂‡§ø ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç"
                />
              </div>
              <div className="form-group">
                <label>‡§ï‡•Å‡§≤ ‡§™‡•ç‡§∞‡§¶‡§æ‡§Ø ‡§∞‡§æ‡§∂‡§ø</label>
                <input
                  type="number"
                  name="releasedAmount"
                  value={form.releasedAmount}
                  onChange={handleChange}
                  className="form-input"
                  placeholder="‡§ï‡•Å‡§≤ ‡§™‡•ç‡§∞‡§¶‡§æ‡§Ø ‡§∞‡§æ‡§∂‡§ø"
                />
              </div>
              <div className="form-group">
                <label>‡§∂‡•á‡§∑ ‡§∞‡§æ‡§∂‡§ø</label>
                <input
                  type="number"
                  name="remainingAmount"
                  value={form.remainingAmount}
                  onChange={handleChange}
                  className="form-input"
                  placeholder="‡§∂‡•á‡§∑ ‡§∞‡§æ‡§∂‡§ø"
                />
              </div>
            </div>

            {/* ‚úÖ Dynamic Rows Table */}
            <div className="table-wrap">
              <table>
                <thead>
                  <tr>
                    <th>‡§ï‡§ø‡§∏‡•ç‡§§ ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï</th>
                    <th>‡§∞‡§æ‡§∂‡§ø</th>
                    <th>‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï</th>
                    <th>‡§è‡§ï‡•ç‡§∂‡§®</th>
                  </tr>
                </thead>
                <tbody>
                  {rows.map((row, index) => (
                    <tr key={index}>
                      <td>{row.kisht}</td>
                      <td>
                        <input
                          type="number"
                          name="amount"
                          value={row.amount}
                          onChange={(e) => handleRowChange(index, e)}
                          className="form-input"
                          placeholder="‡§∞‡§æ‡§∂‡§ø"
                        />
                      </td>
                      <td>
                        <input
                          type="date"
                          name="date"
                          value={row.date}
                          onChange={(e) => handleRowChange(index, e)}
                          className="form-input"
                        />
                      </td>
                      <td>
                        <button
                          type="button"
                          className="btn-delete"
                          onClick={() => removeRow(index)}
                        >
                          üóë
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
              <button type="button" className="btn-add" onClick={addRow}>
                + ‡§®‡§à ‡§™‡§Ç‡§ï‡•ç‡§§‡§ø ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
              </button>
            </div>

            {/* ‚úÖ MB Stage + Expenditure */}
            <div className="form-grid">
              <div className="form-group">
                <label>‡§è‡§Æ ‡§¨‡•Ä ‡§∏‡•ç‡§ü‡•á‡§ú</label>
                <select
                  name="mbStage"
                  value={form.mbStage}
                  onChange={handleChange}
                  className="form-input"
                >
                  <option value="">-- ‡§∏‡•ç‡§ü‡•á‡§ú ‡§ö‡•Å‡§®‡•á‡§Ç --</option>
                  <option value="Stage 1">‡§∏‡•ç‡§ü‡•á‡§ú 1</option>
                  <option value="Stage 2">‡§∏‡•ç‡§ü‡•á‡§ú 2</option>
                  <option value="Stage 3">‡§∏‡•ç‡§ü‡•á‡§ú 3</option>
                </select>
              </div>
              <div className="form-group">
                <label>‡§µ‡•ç‡§Ø‡§Ø ‡§∞‡§æ‡§∂‡§ø</label>
                <input
                  type="number"
                  name="expenditureAmount"
                  value={form.expenditureAmount}
                  onChange={handleChange}
                  className="form-input"
                  placeholder="‡§µ‡•ç‡§Ø‡§Ø ‡§∞‡§æ‡§∂‡§ø"
                />
              </div>
            </div>

            <div className="form-actions">
              <button type="submit" className="btn btn-primary">
                Save
              </button>
              <button
                type="button"
                className="btn btn-ghost"
                onClick={handleCancel}
              >
                Cancel
              </button>
            </div>
          </form>
        </section>
      </div>
    </div>
  );
}
